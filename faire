#!/bin/bash

BINDIR=bin
BINARY=${BINDIR}/charlie
BUILDDIR=build
BUILDINFO=.build.info

# Bring variables from previous build into scope
if [ -f ${BUILDINFO} ]; then
    . $BUILDINFO
fi

function usage() {
    echo "Usage: ./faire <command> <options>"
    echo
    echo "Commands:"
    echo
    echo "b, build <build_type>  Build project in <build_type> mode."
    echo
    echo "                       Mode options are:"
    echo "                       --debug:         Debug mode (default)"
    echo "                       --release:       Release mode"
    echo "                       --reldebinfo:    Release mode with debug info"
    echo "                       --minsizerel:    Release mode optimized for size"
    echo
    echo "r, run <build_type>    Run the target binary"
    echo
    echo "                       Builds if either no binary is found"
    echo "                       or the build type is different than"
    echo "                       that of the binary"
    echo
    echo "fmt, format            Run clang format on the project"
    echo
    echo "c, clean               Clean the project tree."
    echo "h, help                Print this info."
}

function build() {
    # Get build type
    if [ "$1" = "--debug" ] ; then
        BUILDTYPE="Debug"
    elif [ "$1" = "--release" ] ; then
        BUILDTYPE="Release"
    elif [ "$1" = "--reldebinfo" ] ; then
        BUILDTYPE="RelWithDebInfo"
    elif [ "$1" = "--minsizerel" ] ; then
        BUILDTYPE="MinSizeRel"
    elif [ -n "${INFO_BUILDTYPE}" ] ; then
        BUILDTYPE=${INFO_BUILDTYPE}
    else
        # Default build type is debug
        BUILDTYPE="Debug"
    fi

    echo -e "\e[1;34mBuilding in ${BUILDTYPE} mode....\e[0m"

    if [ ! -d "${BUILDDIR}" ] ; then
        cmake -DCMAKE_BUILD_TYPE="${BUILDTYPE}" -H. -B${BUILDDIR}
    fi
    cmake --build ${BUILDDIR}

    # Update build info
    truncate -s 0 $BUILDINFO
    echo "INFO_BUILDTYPE=${BUILDTYPE}" >> $BUILDINFO
}

function run() {
    ./${BINARY} $@
}

if [ $# -lt 1 ] ; then
    usage
    exit 0
fi

CMD=$1
case $CMD in
"build" | "b" )
    shift
    build $1
    ;;
"run" | "r" )
    shift
    if [ ! -d ${BINDIR} ] || [ ! -f ${BINARY} ] ; then
        echo -e "\e[1;34mDid not find ${BINARY}....\e[0m"
        build $1
    fi
    run $@
    ;;
"clean" | "c" )
    echo "Cleaning repository..."
    rm -rf ${BINDIR} ${BUILDDIR} ${BUILDINFO}
    ;;
"format" | "fmt")
    echo "Formatting src directory..."
    clang-format -i -style=file src/*
    ;;
"help" | "h" )
    usage
    exit 0
    ;;
*)
    echo
    echo -e "\e[1;91mUnrecognized command: '$CMD'"
    echo -e "\e[0m"
    usage
    exit 1
    ::
esac
